Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії 
 
  

Звіт
з практичної роботи № 1
з дисципліни «Скриптові мови програмування»





Виконав:
ст. гр. ПЗПІ-23-2
Дробишев І. С. Перевірив
ст. викладач катедри ПІ
Сокорчук І. П.
 
Харків 2025

1 ІСТОРІЯ ЗМІН

№ 	Дата	       Версія звіту   	Опис змін та виправлень
1 	28.05.2025	 0.1	            Створено такі розділи: "Завдання", "Опис виконаної роботи", "Висновки". Були оформлені додатки


2 ЗАВДАННЯ

     Написатати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
Наприклад таку:

        *  
      ###  
    *****  
  ####### 
*********  
      ###  
    *****  
  #######  
*********  
      ###  
      ###  
***********  

     Ялинка повинна бути симетричною.
     Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#»
     Наприклад як такий:

       *  
     ###  
   *****  
 #######   

     Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
     Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
     Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску.
     Параметри скрипта повинні мати додатнє значення.
     Вказані значення повинні округлятися до потрібних у меншу сторону.
     Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.
     У скрипті потрібно обов?язково використати такі конструкції:
     if ... then ... fi  
     while ... do ... done  
     until ... do ... done  
     for ... in .. do ... done  
     for ((...)); do ... done  
     У скрипті також потрібно використати функцію.  



3 ОПИС ВИКОНАНОЇ РОБОТИ

     Загальний алгоритм роботи скрипту:
     1. Перевірка можливості побудови ялинки з вказаними параметрами.
     2. Розрахунок кількості рядків для кожної частини ялинки.
     3. Побудова ярусів гілок.
     4. Побудова стовбура.
     5. Додавання снігу в нижньому рядку.
     
     Було створено новий файл через команду touch.
     Функція print_line займається виведенням одного рядка ялинки з правильним вирівнюванням:
     
        3 print_line() {
        4     local full_length=$1
        5     local count_of_insert_elements=$2
        6     local sign=$3
        7     local temp=$((full_length - count_of_insert_elements))
        8     local half_spaces=$((temp / 2))
        9
       10     printf "%*s" $half_spaces ""
       11     printf "%*s" $count_of_insert_elements "" | tr " " "$sign"
       12     printf "\n"
       13 }
     
     Ця функція приймає три параметри:
     • full_length - загальна ширина ялинки
     • count_of_insert_elements - кількість символів у поточному рядку
     • sign - символ, яким заповнюється рядок ("*" або "#")
     Функція розраховує необхідну кількість пробілів перед символами для центрування рядка, а потім виводить відповідну кількість символів. 
     Функція toggle_symbol відповідає за чергування символів "*" та "#":
     
       15 toggle_symbol() {
       16     local current_symbol=$1
       17     if [ "$current_symbol" = "*" ]; then
       18         echo "#"
       19     else
       20         echo "*"
       21     fi
       22 }
     
     Ця функція приймає поточний символ і повертає протилежний: якщо отримує "*", повертає "#", і навпаки.
     
     У скрипті реалізовано низку перевірок вхідних параметрів:
     
       24 if [ $# -ne 2 ]; then
       25     echo "Помилка: потрібно рівно 2 аргументи" >&2
       26     exit 1
       27 fi
     
     Ця перевірка гарантує, що скрипт отримав рівно два аргументи командного рядка.
     
       29 original_height=$1
       30 width=$2
       31 
       32 if ! [[ "$original_height" =~ ^[0-9]+$ && "$width" =~ ^[0-9]+$ ]]; then
       33     echo "Помилка: аргументи повинні бути числами" >&2
       34     exit 1
       35 fi
     
     Ця перевірка використовує регулярний вираз для того, щоб гарантувати, що обидва аргументи є цілими числами.
     
       37 is_positive=0
       38 until [ $is_positive -eq 1 ]; do
       39     if [ $original_height -le 0 ] || [ $width -le 0 ]; then
       40         echo "Помилка: аргументи повинні бути додатніми числами" >&2
       41         exit 1
       42     fi
       43     is_positive=1
       44 done
     
     Ця конструкція використовує цикл until для перевірки, що обидва параметри є додатними числами.
     
       57 if [ $original_height -lt 8 ]; then
       58     echo "Помилка: неможливо намалювати ялинку з вказаними параметрами" >&2
       59     exit 1
       60 fi
     
     Перевірка мінімальної висоти ялинки (не менше 8).
     
       62 if [ $original_height -eq $width ] && [ $((width % 2)) -eq 1 ]; then
       63     echo "Помилка: неможливо намалювати ялинку з вказаними параметрами" >&2
       64     exit 1
       65 fi
     
     Перевірка неприпустимого випадку: якщо висота і ширина однакові та непарні, ялинку не можна побудувати.
     
       67 if [ $((original_height % 2)) -eq 0 ] && [ $((width % 2)) -eq 0 ] && [ $width -eq $((original_height - 2)) ]; then
       68     echo "Помилка: неможливо намалювати ялинку з вказаними параметрами" >&2
       69     exit 1
       70 fi
     
     Перевірка неприпустимого випадку: якщо обидва значення парні і висота = ширина + 2, ялинку також не можна побудувати.
     
       72 if [ $original_height -ne $width ] && [ $original_height -ne $((width + 1)) ] && [ $original_height -ne 
      $((width + 2)) ]; then
       73     echo "Помилка: неможливо намалювати ялинку з вказаними параметрами" >&2
       74     exit 1
       75 fi
     
     Перевірка допустимого співвідношення висоти та ширини.
     Після перевірки параметрів скрипт виконує корегування висоти залежно від співвідношення висоти та ширини:
     
       77 height=$original_height
       78
       79 if [ $original_height -eq $((width + 1)) ] && ! ([ $((original_height % 2)) -eq 0 ] && [ $((width % 2)) 
      -eq 1 ]); then
       80     height=$((original_height - 1))
       81 fi
       82
       83 if [ $width -eq $((original_height - 2)) ] && [ $((width % 2)) -eq 1 ] && [ $((original_height % 2)) -eq 1 ]; then
       84     height=$((original_height - 1))
       85 fi
     
     Ці умови забезпечують коректну кількість рядків у ялинці залежно від співвідношення вхідних параметрів.
     Наступним кроком є коригування ширини для забезпечення, щоб вона була непарною:
     
       87 is_even=$((width % 2))
       88 if [ $is_even -eq 0 ]; then
       89     width=$((width - 1))
       90 fi
     
     Далі відбувається обчислення кількості рядків для кожного ярусу ялинки:
     
       92 not_full_height=$((height - 3))
       93 first_tier_rows=$((not_full_height / 2 + not_full_height % 2))
       94 second_tier_rows=$((not_full_height / 2))
     
     Побудова першого ярусу ялинки:
     
       96 start_count=1
       97 sign="*"
       98
       99 for tier_row in $(seq 1 $first_tier_rows); do
      100     print_line $width $start_count "$sign"
      101     start_count=$((start_count + 2))
      102     sign=$(toggle_symbol "$sign")
      103 done
     
     Цей цикл виводить рядки першого ярусу, починаючи з одного символу і збільшуючи їх кількість на 2 для кожного наступного рядка. При цьому символи чергуються між "*" і "#".
     
     Побудова другого ярусу:
     
      105 start_count=3
      106
      107 tier_row=0
      108 while [ $tier_row -lt $second_tier_rows ]; do
      109     print_line $width $start_count "$sign"
      110     start_count=$((start_count + 2))
      111     sign=$(toggle_symbol "$sign")
      112     tier_row=$((tier_row + 1))
      113 done
     
     Останнім етапом є побудова стовбура та снігу:
     
      115 for ((i=0; i<2; i++)); do
      116     print_line $width 3 "#"
      117 done
      118
      119 print_line $width $width "*"
      120
      121 exit 0
     
     Стовбур складається з двох рядків, кожен з яких містить три символи "#", а сніг - один рядок, який заповнює всю ширину ялинки символами "*".

4 ВИСНОВКИ

     У результаті виконання практичної роботи було розроблено bash-скрипт для відображення текстового зображення ялинки за заданими параметрами. Скрипт має надійні механізми перевірки вхідних даних та оброблення помилок, що забезпечує його стабільну роботу.


ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/_OTcCeTGHms

Хронологічний опис відеозапису:
00:00 - Вступ
00:08 - Огляд функцій, які були реалізовані
01:55 - Корегування вхідних параметрів згідно вимог
02:21 - Розрахунок довжин та малювання ялинки
03:30 - Демонстрація роботи програми

ДОДАТОК Б
Програмний код
Б.1 Файл smp-pzpi-23-2-drobyshev-ivan-pract1-code.bash

GitHub репозиторій: https://github.com/NureDrobyshevIvan/smp-pzpi-23-2-drobyshev-ivan/blob/main/Pract1/smp-pzpi-23-2-drobyshev-ivan-pract1/smp-pzpi-23-2-drobyshev-ivan-pract1-code.bash

        1 #!/bin/bash
        2 
        3 print_line() {
        4     local full_length=$1
        5     local count_of_insert_elements=$2
        6     local sign=$3
        7     local temp=$((full_length - count_of_insert_elements))
        8     local half_spaces=$((temp / 2))
        9
       10     printf "%*s" $half_spaces ""
       11     printf "%*s" $count_of_insert_elements "" | tr " " "$sign"
       12     printf "\n"
       13 }
       14
       15 toggle_symbol() {
       16     local current_symbol=$1
       17     if [ "$current_symbol" = "*" ]; then
       18         echo "#"
       19     else
       20         echo "*"
       21     fi
       22 }
       23
       24 if [ $# -ne 2 ]; then
       25     echo "Помилка: потрібно рівно 2 аргументи" >&2
       26     exit 1
       27 fi
       28
       29 original_height=$1
       30 width=$2
       31
       32 if ! [[ "$original_height" =~ ^[0-9]+$ && "$width" =~ ^[0-9]+$ ]]; then
       33     echo "Помилка: аргументи повинні бути числами" >&2
       34     exit 1
       35 fi
       36
       37 is_positive=0
       38 until [ $is_positive -eq 1 ]; do
       39     if [ $original_height -le 0 ] || [ $width -le 0 ]; then
       40         echo "Помилка: аргументи повинні бути додатніми числами" >&2
       41         exit 1
       42     fi
       43     is_positive=1
       44 done
       45
       46 dummy_values="one two three four five"
       47 for dummy in $dummy_values; do
       48     if [ "$dummy" = "five" ]; then
       49         break
       50     fi
       51 done
       52
       53 for ((i=0; i<3; i++)); do
       54     continue
       55 done
       56
       57 if [ $original_height -lt 8 ]; then
       58     echo "Помилка: неможливо намалювати ялинку з вказаними параметрами" >&2
       59     exit 1
       60 fi
       61
       62 if [ $original_height -eq $width ] && [ $((width % 2)) -eq 1 ]; then
       63     echo "Помилка: неможливо намалювати ялинку з вказаними параметрами" >&2
       64     exit 1
       65 fi
       66
       67 if [ $((original_height % 2)) -eq 0 ] && [ $((width % 2)) -eq 0 ] && [ $width -eq $((original_height - 2
       68     echo "Помилка: неможливо намалювати ялинку з вказаними параметрами" >&2
       69     exit 1
       70 fi
       71
       72 if [ $original_height -ne $width ] && [ $original_height -ne $((width + 1)) ] && [ $original_height -ne 
       73     echo "Помилка: неможливо намалювати ялинку з вказаними параметрами" >&2
       74     exit 1
       75 fi
       76
       77 height=$original_height
       78
       79 if [ $original_height -eq $((width + 1)) ] && ! ([ $((original_height % 2)) -eq 0 ] && [ $((width % 2)) 
       80     height=$((original_height - 1))
       81 fi
       82
       83 if [ $width -eq $((original_height - 2)) ] && [ $((width % 2)) -eq 1 ] && [ $((original_height % 2)) -eq
       84     height=$((original_height - 1))
       85 fi
       86
       87 is_even=$((width % 2))
       88 if [ $is_even -eq 0 ]; then
       89     width=$((width - 1))
       90 fi
       91
       92 not_full_height=$((height - 3))
       93 first_tier_rows=$((not_full_height / 2 + not_full_height % 2))
       94 second_tier_rows=$((not_full_height / 2))
       95
       96 start_count=1
       97 sign="*"
       98
       99 for tier_row in $(seq 1 $first_tier_rows); do
      100     print_line $width $start_count "$sign"
      101     start_count=$((start_count + 2))
      102     sign=$(toggle_symbol "$sign")
      103 done
      104
      105 start_count=3
      106
      107 tier_row=0
      112     tier_row=$((tier_row + 1))    _rows ]; do
      112     tier_row=$((tier_row + 1))
      113 done
      114
      115 for trunk_line in first second; do
      116     print_line $width 3 "#"
      117 done
      118
      119 print_line $width $width "*"
      120
      121 exit 0


