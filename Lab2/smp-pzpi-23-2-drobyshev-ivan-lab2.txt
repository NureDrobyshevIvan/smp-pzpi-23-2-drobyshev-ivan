Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії 
 
  

Звіт
з лабораторної роботи № 2
з дисципліни «Скриптові мови програмування»






Виконав:
ст. гр. ПЗПІ-23-2
Дробишев І. С. Перевірив
ст. викладач катедри ПІ
Сокорчук І. П.
 
Харків 2025
1 ІСТОРІЯ ЗМІН

№ 	Дата	       Версія звіту   	Опис змін та виправлень
1 	28.05.2025	 0.1	            Створено такі розділи: "Завдання", "Опис виконаної роботи", "Висновки". Були оформлені додатки


2 ЗАВДАННЯ

     * Розробити консольний застосунок «Продовольчий магазин "Весна"», який дозволяє:
     1. Переглядати та обирати товари з фіксованого списку.
     2. Додавати товари у кошик, змінювати їхню кількість або видаляти з кошика.
     3. Переглядати підсумковий рахунок з деталізацією по кожному товару та загальною сумою до сплати.
     4. Налаштовувати профіль користувача (ім’я та вік) з перевіркою коректності введених даних.
     5. Завершувати роботу програми через відповідний пункт меню.
     * Програма повинна:
     * Виводити головне меню з переліком можливих дій.
     * Реагувати на некоректний вибір пункту меню або товару повідомленням про помилку та повторним запитом.
     * Відображати список товарів з номерами, назвами та цінами.
     * Дозволяти додавати товари у кошик, змінювати їхню кількість або видаляти.
     * Формувати підсумковий рахунок з розрахунком вартості кожного товару та загальної суми.
     * Дозволяти користувачу налаштувати свій профіль, перевіряючи, що ім’я не порожнє і містить хоча б одну літеру, а вік знаходиться у межах від 7 до 150 років.
     * Завершувати роботу за командою користувача.


3 ОПИС ВИКОНАНОЇ РОБОТИ

     Для виконання лабораторної роботи було створено консольний застосунок на PHP, який імітує роботу продовольчого магазину. Весь код розміщено в одному файлі, що містить клас Store з усією необхідною логікою.
     У початкових рядках (див. додаток Б.1, рядки 1–37) оголошується клас Store, в якому визначено приватні властивості (масив товарів, кошик, ім’я користувача та вік).
     Далі (див. додаток Б.1, рядки 39–63) реалізовано приватну функцію getMaxNameLengthFromArray, яка обчислює максимальну довжину назви товару для коректного форматування виводу.
     У функції displayMenu (див. додаток Б.1, рядки 65–78) виводиться основний список команд (вибір товарів, перегляд рахунку, налаштування профілю, вихід) із запитом на введення команди.
     Функція displayProducts (див. додаток Б.1, рядки 80–101) виводить список товарів (з вирівнюванням колонок) і пропонує користувачу вибрати товар (або повернутися, ввівши нуль).
     У функції addToCart (див. додаток Б.1, рядки 103–127) відбувається додавання (або видалення, якщо кількість нуль) товару у кошик, а також виводиться поточний вміст кошика (з динамічним вирівнюванням). Перед додаванням перевіряється, чи існує товар (за id) і чи коректна кількість (від 0 до 100).
     Функція displayBill (див. додаток Б.1, рядки 134–167) виводить підсумковий рахунок (з вирівнюванням, підрахунком загальної суми) і, якщо кошик порожній, виводить відповідне повідомлення.
     Допоміжна функція getProductById (див. додаток Б.1, рядки 169–178) повертає товар (або null) за його id.
     У функції setProfile (див. додаток Б.1, рядки 180–201) користувач вводить своє ім’я (з валідацією, щоб воно складалося лише з літер) та вік (з перевіркою, щоб вік був від 7 до 150 років). Після коректного введення (з циклом do-while) змінні (username, age) оновлюються і виводиться інформація про профіль.
     У завершальній частині файлу (див. додаток Б.1, рядки 203–209) (після оголошення класу) створюється екземпляр класу (об’єкт $store) і виводиться привітання.
     Далі запускається нескінченний цикл (while (true)), в якому викликається функція displayMenu, зчитується команда (readline) і, залежно від введеного значення (switch), виконується відповідна дія (вибір товарів, перегляд рахунку, налаштування профілю або вихід).
     При виборі товарів (case "1") запускається вкладений цикл, який викликає displayProducts, зчитує id товару (і, якщо введено нуль, виходить з циклу), перевіряє (через getProductById) існування товару, зчитує кількість і викликає addToCart. При виборі перегляду рахунку (case "2") викликається функція displayBill. При виборі налаштування профілю (case "3") викликається функція setProfile. Якщо введено невідому команду (default), виводиться повідомлення про помилку. При виборі виходу (case "0") виводиться прощальне повідомлення і програма завершується (exit).
     

4 ВИСНОВКИ

     Під час виконання лабораторної роботи було створено застосунок на мові PHP. У процесі розробки було реалізовано консольний застосунок, який імітує роботу продовольчого магазину.


ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/S8l7TuBfW-M

Хронологічний опис відеозапису:
00:00 - Вступ
00:07 - Ініціалізація основих полів у класі
00:24 - Огляд основих функцій програми
06:20 - Ініціалізація класу Store
07:31 - Демонстрація роботи програми

ДОДАТОК Б
Програмний код
Б.1 Файл smp-pzpi-23-2-drobyshev-ivan-lab2-code.bash

GitHub репозиторій: https://github.com/NureDrobyshevIvan/smp-pzpi-23-2-drobyshev-ivan/blob/main/Lab2/smp-pzpi-23-2-drobyshev-ivan-lab2/smp-pzpi-23-2-drobyshev-ivan-lab2-code.php

        1 <?php
        2 
        3 class Store {
        4     private array $products = [
        5         ['id' => 1, 'name' => 'Молоко пастеризоване', 'price' => 12],
        6         ['id' => 2, 'name' => 'Хліб чорний', 'price' => 9],
        7         ['id' => 3, 'name' => 'Сир білий', 'price' => 21],
        8         ['id' => 4, 'name' => 'Сметана 20%', 'price' => 25],
        9         ['id' => 5, 'name' => 'Кефір 1%', 'price' => 19],
       10         ['id' => 6, 'name' => 'Вода газована', 'price' => 18],
       11         ['id' => 7, 'name' => 'Печиво "Весна"', 'price' => 14]
       12     ];
       13
       14     private array $cart = [];
       15     private string $username = '';
       16     private int $age = 0;
       17
       18     private function getMaxNameLengthFromArray(array $items): int {
       19         $maxLength = 0;
       20         foreach ($items as $item) {
       21             preg_match_all('/./us', $item['name'], $smth);
       22             $length = count($smth[0]);
       23             if ($length > $maxLength) {
       24                 $maxLength = $length;
       25             }
       26         }
       27         return $maxLength;
       28     }
       29
       30     public function displayMenu(): void {
       31         echo "1 Вибрати товари\n";
       32         echo "2 Отримати підсумковий рахунок\n";
       33         echo "3 Налаштувати свій профіль\n";
       34         echo "0 Вийти з програми\n";
       35         echo "Введіть команду: ";
       36     }
       37
       38     public function displayProducts(): void {
       39         $maxNameLength = $this->getMaxNameLengthFromArray($this->products);
       40         echo "№  НАЗВА" .  str_repeat(" ", $maxNameLength - 5 + 2) . "ЦІНА\n";
       41         foreach ($this->products as $product) {
       42             preg_match_all('/./us', $product['name'], $smth);
       43             $currentLength = count($smth[0]);
       44             $padding = str_repeat(" ", max(0, $maxNameLength - $currentLength + 2));
       45             printf("%-2d %s%s%d\n",
       46                 $product['id'],
       47                 $product['name'],
       48                 $padding,
       49                 $product['price']
       50             );
       51         }
       52         echo "   " . str_repeat("-", $maxNameLength + 8) . "\n";
       53         echo "0  ПОВЕРНУТИСЯ\n";
       54         echo "Виберіть товар: ";
       55     }
       56
       57     public function addToCart(int $productId, int $quantity): bool {
       58         if ($quantity < 0 || $quantity > 100) {
       59             return false;
       60         }
       61
       62         $product = array_filter($this->products, fn($p) => $p['id'] === $productId);
       63         if (empty($product)) {
       64             return false;
       65         }
       66
       67         $product = reset($product);
       68
       69         if ($quantity === 0) {
       70             unset($this->cart[$productId]);
       71             echo "ВИДАЛЯЮ З КОШИКА\n";
       72             if (empty($this->cart)) {
       73                 echo "КОШИК ПОРОЖНІЙ\n";
       74             }
       75             return true;
       76         }
       77
       78         $this->cart[$productId] = [
       79             'name' => $product['name'],
       80             'price' => $product['price'],
       81             'quantity' => $quantity
       82         ];
       83
       84         $maxNameLength = $this->getMaxNameLengthFromArray($this->cart);
       85         echo "У КОШИКУ:\n";
       86         echo "НАЗВА" . str_repeat(" ", max(0, $maxNameLength - 5 + 2)) . "КІЛЬКІСТЬ\n";
       87         foreach ($this->cart as $item) {
       88             preg_match_all('/./us', $item['name'], $smth);
       89             $currentLength = count($smth[0]);
       90             $padding = str_repeat(" ", max(0, $maxNameLength - $currentLength + 2));
       91             printf("%s%s%d\n",
       92                 $item['name'],
       93                 $padding,
       94                 $item['quantity']
       95             );
       96         }
       97
       98         return true;
       99     }
      100
      101     public function displayBill(): void {
      102         if (empty($this->cart)) {
      103             echo "КОШИК ПОРОЖНІЙ\n";
      104             return;
      105         }
      106
      107         $maxNameLength = $this->getMaxNameLengthFromArray($this->cart);
      108         echo "№  НАЗВА" . str_repeat(" ", max(0, $maxNameLength - 5 + 2)) . "ЦІНА  КІЛЬ
      109         $total = 0;
      110         $counter = 1;
      111
      112         foreach ($this->cart as $item) {
      113             $cost = $item['price'] * $item['quantity'];
      114             $total += $cost;
      115             preg_match_all('/./us', $item['name'], $smth);
      116             $currentLength = count($smth[0]);
      117             $padding = str_repeat(" ", max(0, $maxNameLength - $currentLength + 2));
      118             printf("%-2d %s%s%-5d %-10d %d\n",
      119                 $counter++,
      120                 $item['name'],
      121                 $padding,
      122                 $item['price'],
      123                 $item['quantity'],
      124                 $cost
      125             );
      126         }
      127
      128         echo "РАЗОМ ДО CПЛАТИ: " . $total . "\n";
      129     }
      130
      131     public function getProductById(int $id): ?array {
      132         foreach ($this->products as $product) {
      133             if ($product['id'] === $id) {
      134                 return $product;
      135             }
      136         }
      137         return null;
      138     }
      139
      140     public function setProfile(): void {
      141         do {
      142             $name = readline("Ваше ім'я: ");
      143             $validName = !empty($name) && preg_match('/^\p{L}+$/u', $name);
      144             if (!$validName) {
      145                 echo "ПОМИЛКА! Ім'я повинно містити хоча б одну літеру та не повинно мі
      146             }
      147         } while (!$validName);
      148
      149         do {
      150             $age = (int)readline("Ваш вік: ");
      151             $validAge = (is_numeric($age) && $age >= 7 && $age <= 150);
      152             if (!$validAge) {
      153                 echo "ПОМИЛКА! Вік повинен бути від 7 до 150 років\n";
      154             }
      155         } while (!$validAge);
      156         $this->username = $name;
      157         $this->age = $age;
      158         echo "Ім'я: $name\n";
      159         echo "Вік: $age\n";
      160     }
      161 }
      162
      163 $store = new Store();
      164 echo "################################\n";
      165 echo "# ПРОДОВОЛЬЧИЙ МАГАЗИН \"ВЕСНА\" #\n";
      166 echo "################################\n";
      167
      168 while (true) {
      169     $store->displayMenu();
      170     $command = readline();
      171
      172     switch ($command) {
      173         case '0':
      174             exit("Дякуємо за покупки!\n");
      175
      176         case '1':
      177             while (true) {
      178                 $store->displayProducts();
      179                 $productId = (int)readline();
      180
      181                 if ($productId === 0) {
      182                     break;
      183                 }
      184
      185                 $product = $store->getProductById($productId);
      186                 if (!$product) {
      187                     echo "ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ\n";
      188                     continue;
      189                 }
      190
      191                 echo "Вибрано: " . $product['name'] . "\n";
      192                 $quantity = (int)readline("Введіть кільксть штук: ");
      193
      194                 $store->addToCart($productId, $quantity);
      195             }
      206         default:k;
      
      207             echo "ПОМИЛКА! Введіть правильну команду\n";
      208     }
      209 }


